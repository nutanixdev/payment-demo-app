---
apiVersion: v1
kind: Namespace
metadata:
  name: payment-app
  labels:
    app: payment-app
---
# STORAGE
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: payment-app
provisioner: csi.nutanix.com
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
parameters:
  csi.storage.k8s.io/fstype: xfs
  isSegmentedIscsiNetwork: "false"
  storageContainer: SelfServiceContainer
  storageType: NutanixVolumes
---
# BACKEND (PostgreSQL)
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres
  namespace: payment-app
  labels:
    app: payment-app
    tier: postgres
type: Opaque
stringData:
  POSTGRES_PASSWORD: Nutanix/4u
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: payment-app
  labels:
    app: payment-app
    tier: postgres
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: payment-app
      tier: postgres
  template:
    metadata:
      labels:
        app: payment-app
        tier: postgres
    spec:
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 999
      containers:
        - name: postgres
          image: postgres:16.1
          args:
            - "-c"
            - "log_directory=/mnt/postgresql-16/pglogs/logs"
            - "-c"
            - "data_directory=/mnt/postgresql-16/pgdata/data"
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /mnt/postgresql-16/pgdata/data
            - name: PG_LOG
              value: /mnt/postgresql-16/pglogs/logs
          volumeMounts:
            - name: postgres-data
              mountPath: /mnt/postgresql-16/pgdata
            - name: pgsql-os
              mountPath: /var/opt/pgsql
            - name: postgres-backup
              mountPath: /mnt/postgresql-16/pgbackup
            - name: postgres-log
              mountPath: /mnt/postgresql-16/pglogs
  volumeClaimTemplates:
    - metadata:
        name: pgsql-os
        labels:
          app: payment-app
          tier: postgres
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: payment-app
        resources:
          requests:
            storage: 200Gi
    - metadata:
        name: postgres-data
        labels:
          app: payment-app
          tier: postgres
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: payment-app
        resources:
          requests:
            storage: 600Gi
    - metadata:
        name: postgres-log
        labels:
          app: payment-app
          tier: postgres
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: payment-app
        resources:
          requests:
            storage: 500Gi
    - metadata:
        name: postgres-backup
        labels:
          app: payment-app
          tier: postgres
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: payment-app
        resources:
          requests:
            storage: 800Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: payment-app
  labels:
    app: payment-app
    tier: postgres
spec:
  type: ClusterIP
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: payment-app
    tier: postgres
---
# FRONTEND (FastAPI)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  namespace: payment-app
  labels:
    app: payment-app
    tier: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: payment-app
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: payment-app
        tier: frontend
    spec:
      containers:
        - image: ghcr.io/nutanixdev/payment-demo-app
          name: payment
          env:
            - name: ACCOUNT_NAME
              value: Mano
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_ADDRESS
              value: postgres
            - name: POSTGRES_PORT
              value: "5432"
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  namespace: payment-app
  labels:
    app: payment-app
    tier: frontend
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
  selector:
    app: payment-app
    tier: frontend
---
# LOAD TESTING (Locust)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: locust-test
  namespace: payment-app
data:
  locustfile.py: |
    import random

    from locust import HttpUser, between, task


    class PerformanceTests(HttpUser):
        wait_time = between(1, 3)

        def on_start(self):
            self.client.verify = False
            self.client.headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }

        @task(1)
        def testFastApi(self):

            amount = random.randrange(100)
            currency = random.choice(["eur","usd","cad","gbp","fake"])
            payee = random.choice(["Muhammad","John","Maria","Liu","Anna"])+" "+random.choice(["Wang","Li","Smith","Johnson","Garc√≠a"])

            body = {
                "payee": payee,
                "amount": amount,
                "currency": currency,
                "description": f"payment of {amount}"
            }

            self.client.post("/payments/", json=body)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust-master
  namespace: payment-app
  labels:
    app: locust-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locust-master
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: locust-master
    spec:
      containers:
        - image: locustio/locust
          name: master
          args: ["--master"]
          volumeMounts:
            - mountPath: /home/locust
              name: locust-scripts
          ports:
            - containerPort: 5557
              name: comm
            - containerPort: 5558
              name: comm-plus-1
            - containerPort: 8089
              name: web-ui
      terminationGracePeriodSeconds: 30
      volumes:
        - name: locust-scripts
          configMap:
            name: locust-test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust-worker
  namespace: payment-app
  labels:
    app: locust-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: locust-worker
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: locust-worker
    spec:
      containers:
        - image: locustio/locust
          name: worker
          args: ["--worker", "--master-host=locust-master"]
          volumeMounts:
            - mountPath: /home/locust
              name: locust-scripts
      terminationGracePeriodSeconds: 30
      volumes:
        - name: locust-scripts
          configMap:
            name: locust-test
---
apiVersion: v1
kind: Service
metadata:
  name: locust-master
  namespace: payment-app
  labels:
    app: locust-master
spec:
  type: ClusterIP
  ports:
    - port: 5557
      name: communication
    - port: 5558
      name: communication-plus-1
  selector:
    app: locust-master
---
apiVersion: v1
kind: Service
metadata:
  name: locust-ui
  namespace: payment-app
  labels:
    app: locust-master
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8089
      name: web-ui
  selector:
    app: locust-master
---
# DB MGMT (pgAdmin)
---
apiVersion: v1
kind: Secret
metadata:
  name: pgadmin
  namespace: payment-app
  labels:
    app: pgadmin
type: Opaque
stringData:
  PGADMIN_PASSWORD: Nutanix/4u
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pgadmin
  namespace: payment-app
  labels:
    app: pgadmin
spec:
  serviceName: pgadmin-service
  podManagementPolicy: Parallel
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: payment-app
      tier: pgadmin
  template:
    metadata:
      labels:
        app: payment-app
        tier: pgadmin
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
        fsGroup: 5050
      containers:
        - name: pgadmin
          image: dpage/pgadmin4:8.6
          env:
            - name: PGADMIN_DISABLE_POSTFIX
              value: "True"
            - name: PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION
              value: "False"
            - name: PGADMIN_DEFAULT_EMAIL
              value: pgadmin@nutanix.com
            - name: PGADMIN_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgadmin
                  key: PGADMIN_PASSWORD
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: pgadmin-config
              mountPath: /pgadmin4/servers.json
              subPath: servers.json
              readOnly: true
            - name: pgadmin-data
              mountPath: /var/lib/pgadmin
      volumes:
        - name: pgadmin-config
          configMap:
            name: pgadmin-config
  volumeClaimTemplates:
    - metadata:
        name: pgadmin-data
        labels:
          app: payment-app
          tier: pgadmin
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: payment-app
        resources:
          requests:
            storage: 3Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgadmin-config
  namespace: payment-app
  labels:
    app: pgadmin
data:
  servers.json: |
    {
        "Servers": {
          "1": {
            "Name": ".NEXT24 PostgreSQL",
            "Group": "Servers",
            "Port": 5432,
            "Username": "postgres",
            "Host": "postgres",
            "SSLMode": "prefer",
            "MaintenanceDB": "postgres"
          }
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: payment-app
  labels:
    app: pgadmin
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
  selector:
    app: payment-app
    tier: pgadmin
